# OpenSCAD Babylon - Windsurf AI Project Rules

You are an expert TypeScript/React developer working on OpenSCAD Babylon, a production-ready web-based 3D model editor that uses OpenSCAD syntax for real-time 3D visualization with BabylonJS rendering.

## 🎯 PROJECT OVERVIEW

**Architecture**: Feature-based organization with bulletproof-react patterns
**Tech Stack**: React 19, TypeScript 5.8.3, BabylonJS 8.16.1, Vite 6.0.0, Biome 2.0.6
**Performance Target**: <16ms render times for real-time 3D interaction
**Quality Gates**: Zero TypeScript errors, Zero Biome violations, 95%+ test coverage

## 🚨 CRITICAL DEVELOPMENT RULES - MANDATORY COMPLIANCE

### 1. NO MOCKS POLICY ✅ STRICTLY ENFORCED
- **NEVER** mock OpenSCAD Parser - use real `OpenscadParser` instances
- **NEVER** mock BabylonJS - use `BABYLON.NullEngine()` for headless testing
- **ALWAYS** use real implementations in tests with proper initialization and cleanup

```typescript
// ✅ CORRECT - Real OpenSCAD Parser
const parser = new OpenscadParser();
await parser.init();

// ✅ CORRECT - Real BabylonJS with NullEngine
const engine = new BABYLON.NullEngine();
const scene = new BABYLON.Scene(engine);
```

### 2. SRP-BASED FILE STRUCTURE ✅ MANDATORY
- **Each file MUST have single responsibility** (under 500 lines)
- **Co-locate tests** with implementation in same folder
- **NO `__tests__` folders** - tests go next to implementation
- **Use kebab-case** for all filenames

```
feature/
├── feature-component/
│   ├── feature-component.ts
│   └── feature-component.test.ts
└── feature-service/
    ├── feature-service.ts
    └── feature-service.test.ts
```

### 3. TYPESCRIPT STRICT MODE ✅ ZERO TOLERANCE
- **NO `any` types** - use `unknown` instead
- **Explicit return types** for all functions
- **Result<T,E> pattern** for error handling instead of throwing exceptions
- **Branded types** for type safety
- **Functional programming** - pure functions, immutable data structures

```typescript
// ✅ CORRECT - Result<T,E> pattern
type Result<T, E> = 
  | { success: true; data: T } 
  | { success: false; error: E };

function processNode(node: OpenSCADNode): Result<ProcessedNode, ProcessingError> {
  // Implementation
}
```

### 4. BIOME COMPLIANCE ✅ ZERO VIOLATIONS
- **Run `pnpm biome:fix`** after each change
- **NO unused variables** (prefix with `_` if intentional)
- **Use optional chaining** (`?.`) instead of manual null checks
- **Use template literals** over string concatenation
- **Single quotes** for JavaScript, **double quotes** for JSX

### 5. TDD METHODOLOGY ✅ MANDATORY
- **Write failing tests first**, then implement minimal solution
- **95%+ test coverage** target with real implementations
- **Incremental development** with small, focused changes
- **Test-driven refactoring** for code improvements

## 🏗️ ARCHITECTURE PATTERNS

### Feature-Based Organization
```
src/
├── features/                    # Feature-based modules
│   ├── babylon-renderer/        # BabylonJS 3D rendering
│   ├── code-editor/            # Monaco editor integration
│   ├── openscad-parser/        # AST parsing integration
│   └── store/                  # Zustand state management
├── shared/                     # Shared utilities and components
│   ├── components/             # Reusable UI components
│   ├── hooks/                  # Custom React hooks
│   ├── types/                  # Shared TypeScript types
│   └── utils/                  # Pure utility functions
└── test/                       # Test utilities and setup
```

### BabylonJS-Extended AST Pattern
- **All OpenSCAD nodes extend `BABYLON.AbstractMesh`** for unified interface
- **Framework-agnostic** BabylonJS logic independent of React
- **Proper resource disposal** to prevent memory leaks
- **Performance optimization** for <16ms render times

### React 19 Patterns
- **Functional components only** with hooks
- **Concurrent features** and Suspense for async operations
- **Error boundaries** for graceful failure handling
- **Custom hooks** for reusable logic following SRP

## 🧪 TESTING STRATEGY

### Unit Testing with Vitest
```typescript
// ✅ CORRECT - BabylonJS testing pattern
describe('BabylonJS Component', () => {
  let scene: BABYLON.Scene;
  let engine: BABYLON.NullEngine;
  
  beforeEach(() => {
    engine = new BABYLON.NullEngine();
    scene = new BABYLON.Scene(engine);
  });
  
  afterEach(() => {
    scene.dispose();
    engine.dispose();
  });
});

// ✅ CORRECT - OpenSCAD Parser testing pattern
describe('OpenSCAD Parser', () => {
  let parser: OpenscadParser;
  
  beforeEach(async () => {
    parser = new OpenscadParser();
    await parser.init();
  });
  
  afterEach(() => {
    parser?.dispose();
  });
});
```

### Quality Gates
- **TypeScript**: Zero compilation errors in strict mode
- **Biome**: Zero linting violations
- **Tests**: 95% coverage minimum with real implementations
- **Performance**: <16ms render times
- **Memory**: Proper disposal of 3D resources

## 🎨 CODE STYLE GUIDELINES

### TypeScript Best Practices
```typescript
// ✅ CORRECT - Functional programming patterns
const processNodes = (nodes: readonly OpenSCADNode[]): readonly ProcessedNode[] => {
  return nodes.map(node => ({
    ...node,
    processed: true,
    timestamp: new Date()
  }));
};

// ✅ CORRECT - Immutable interfaces
interface ImmutableConfig {
  readonly apiUrl: string;
  readonly timeout: number;
  readonly retries: number;
}

// ✅ CORRECT - Type guards instead of assertions
function isValidNode(node: unknown): node is OpenSCADNode {
  return typeof node === 'object' && 
         node !== null && 
         'type' in node;
}
```

### React Component Patterns
```typescript
// ✅ CORRECT - Component with proper typing
interface ComponentProps {
  readonly className?: string;
  readonly 'data-testid'?: string;
  readonly 'aria-label'?: string;
}

export const Component: React.FC<ComponentProps> = ({
  className = '',
  'data-testid': dataTestId = 'component',
  'aria-label': ariaLabel = 'Component'
}) => {
  // Implementation
};
```

## 🚀 PERFORMANCE REQUIREMENTS

### Rendering Performance
- **Target**: <16ms frame times for 60fps real-time interaction
- **Memory Management**: Automatic cleanup and disposal of BabylonJS resources
- **Bundle Optimization**: Code splitting for optimal loading
- **Hot Reload**: <100ms development reload times with Vite HMR

### OpenSCAD Specific
- **Coordinate System**: Z-up, right-handed (OpenSCAD standard)
- **Primitives**: cube, sphere, cylinder with OpenSCAD-compatible tessellation
- **Transformations**: translate, rotate, scale, mirror
- **CSG Operations**: union, difference, intersection with manifold-3d

## 📚 DOCUMENTATION STANDARDS

### JSDoc Requirements
```typescript
/**
 * @file component-name.ts
 * @description Brief description of the component's purpose and responsibility
 * 
 * @example
 * ```typescript
 * // Usage example
 * const result = processNode(node);
 * ```
 * 
 * @author OpenSCAD Babylon Team
 * @since 2025-01-01
 */
```

### Code Documentation
- **JSDoc comments** for all public APIs with descriptions and examples
- **Inline comments** for complex algorithms and business logic
- **README files** for each feature directory
- **Architecture decisions** documented with rationale

## 🔧 DEVELOPMENT WORKFLOW

### Commands to Run After Changes
```bash
pnpm type-check    # Must return 0 TypeScript errors
pnpm biome:fix     # Must return 0 Biome violations
pnpm test          # Must maintain 95%+ coverage
pnpm test:watch    # For TDD development
```

### Git Workflow
- **Feature branches** for all changes
- **Small, focused commits** with descriptive messages
- **Pre-commit hooks** run type checking and linting
- **CI/CD pipeline** enforces all quality gates

## 🎯 OPENSCAD SPECIFIC GUIDELINES

### AST Node Types
- **PrimitiveNode**: 3D and 2D primitives (cube, sphere, cylinder)
- **TransformNode**: All transformations (translate, rotate, scale)
- **CSGNode**: Boolean operations (union, difference, intersection)
- **ModuleNode**: User-defined modules with parameter binding
- **ControlFlowNode**: for, if, let statements

### Error Handling
```typescript
// ✅ CORRECT - OpenSCAD error types
interface ParseError {
  readonly type: 'ParseError';
  readonly message: string;
  readonly line: number;
  readonly column: number;
}

interface RenderError {
  readonly type: 'RenderError';
  readonly message: string;
  readonly nodeType: string;
}
```

## 🏆 SUMMARY

This is a **production-ready 3D modeling application** with:
- **Comprehensive test coverage** (95%+ target) using real implementations
- **Strict type safety** with zero TypeScript errors policy
- **Optimized performance** for real-time 3D rendering (<16ms render times)
- **Modern architecture** following bulletproof-react and functional programming patterns
- **Advanced tooling** with Vite, Biome, and comprehensive testing suite
- **Framework-agnostic core** with BabylonJS and OpenSCAD parser independence

**Always prioritize maintainability, performance, and developer experience while delivering robust OpenSCAD-based 3D modeling capabilities.**