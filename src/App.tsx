/**
 * @file App.tsx
 * @description This file exports the main application component, which serves as the root of the OpenSCAD 3D Visualizer.
 * It integrates the code editor, 3D renderer, and state management to provide a complete user experience.
 *
 * @architectural_decision
 * The application follows a Zustand-centric architecture, where the UI components are connected to a central store.
 * This approach simplifies state management and ensures a unidirectional data flow, making the application more predictable and easier to debug.
 * The main view is a split-panel layout with a resizable handle, allowing users to adjust the editor and renderer widths.
 *
 * @example
 * ```tsx
 * import React from 'react';
 * import ReactDOM from 'react-dom/client';
 * import { App } from './App';
 *
 * ReactDOM.createRoot(document.getElementById('root')!).render(
 *   <React.StrictMode>
 *     <App />
 *   </React.StrictMode>
 * );
 * ```
 */

import type React from 'react';
import { useEffect, useState } from 'react';
import { AxisOverlayControls } from './features/babylon-renderer/components/axis-overlay-controls';
import { StoreConnectedRenderer } from './features/babylon-renderer/components/store-connected-renderer';
import { StoreConnectedEditor } from './features/code-editor/components/store-connected-editor';
import type { ASTNode } from './features/openscad-parser/core/ast-types.js';
import { useAppStore } from './features/store/app-store';
import {
  selectParsingAST,
  selectRenderingErrors,
  selectRenderingIsRendering,
  selectRenderingMeshes,
} from './features/store/selectors';
import { ErrorBoundary } from './shared/components/error-boundary';
import { createLogger } from './shared/services/logger.service';

const logger = createLogger('App');

/**
 * @component App
 * @description The main application component that orchestrates the entire UI.
 * It connects to the Zustand store to get the application state and renders the editor and renderer panels.
 * The component also handles the resizing of the panels and logs application state changes for debugging purposes.
 *
 * @returns {React.JSX.Element} The rendered application UI.
 *
 * @example
 * ```tsx
 * // This component is typically used as the root component of the application.
 * <App />
 * ```
 */
export function App(): React.JSX.Element {
  logger.init('Rendering OpenSCAD 3D Visualization Application v2.0.0');

  // Store selectors for application state
  /**
   * @property {ReadonlyArray<ASTNode>} ast
   * @description The Abstract Syntax Tree (AST) generated from the OpenSCAD code.
   * This is a read-only array of AST nodes, representing the parsed structure of the code.
   * It's used by the 3D renderer to construct the visual scene.
   */
  const ast: ReadonlyArray<ASTNode> = useAppStore(selectParsingAST);

  /**
   * @property {boolean} applicationStatus
   * @description Indicates whether the application is currently in a rendering state.
   * This can be used to display a loading indicator or change UI elements based on the rendering status.
   */
  const applicationStatus: boolean = useAppStore(selectRenderingIsRendering);

  /**
   * @property {ReadonlyArray<unknown>} renderingStateMeshes
   * @description A read-only array of meshes generated by the 3D renderer.
   * These meshes represent the 3D objects to be displayed in the scene.
   */
  const renderingStateMeshes: ReadonlyArray<unknown> = useAppStore(selectRenderingMeshes);

  /**
   * @property {ReadonlyArray<Error>} renderErrors
   * @description A read-only array of errors encountered during the rendering process.
   * These errors are displayed to the user to provide feedback on rendering issues.
   */
  const renderErrors = useAppStore(selectRenderingErrors);

  /**
   * @effect
   * @description Displays render errors if any are detected in the application state.
   * This provides immediate feedback to the user or developer if something goes wrong during the rendering process.
   *
   * @example
   * ```typescript
   * // When a rendering error occurs, this effect logs the error messages.
   * // For instance, if `renderErrors` contains:
   * // [{ message: "Invalid AST node" }, { message: "Failed to create mesh" }]
   * // The logger will output:
   * // [ERROR][App] Render errors detected: ["Invalid AST node", "Failed to create mesh"]
   * ```
   *
   * @limitations
   * Currently, this only logs errors to the console. In a production environment,
   * these errors might be displayed in a more user-friendly way (e.g., a toast notification)
   * or sent to an error tracking service.
   */
  useEffect(() => {
    if (renderErrors.length > 0) {
      logger.error(
        'Render errors detected:',
        renderErrors.map((e) => e.message)
      );
    }
  }, [renderErrors]);

  /**
   * @effect
   * @description Logs a debug message when the App component is mounted (performance optimized).
   * Removed AST and mesh dependencies to prevent expensive logging on every change.
   */
  useEffect(() => {
    logger.debug('[DEBUG][App] App component mounted and ready');
  }, []); // Empty dependency array - runs only on mount

  // Removed expensive AST change logging to prevent performance issues during typing

  /**
   * @property {number} editorWidth
   * @description Local state for managing the width of the code editor panel as a percentage of the total width.
   * This allows for dynamic resizing of the editor and renderer panels.
   *
   * @example
   * ```typescript
   * // Initial state: editorWidth is 50%
   * const [editorWidth, setEditorWidth] = useState(50);
   * // After resizing, editorWidth might become 60%
   * setEditorWidth(60);
   * ```
   */
  const [editorWidth, setEditorWidth] = useState(50); // Percentage

  /**
   * @property {boolean} isResizing
   * @description Local state indicating whether the user is currently resizing the panels.
   * This is used to apply visual feedback (e.g., changing cursor style) during the resize operation.
   *
   * @example
   * ```typescript
   * // When the user starts dragging the resize handle:
   * setIsResizing(true);
   * // When the user releases the mouse:
   * setIsResizing(false);
   * ```
   */
  const [isResizing, setIsResizing] = useState(false);

  /**
   * @effect
   * @description Initializes the application on mount, logging a ready message.
   * This is useful for tracking the application's lifecycle and confirming that the main component has rendered.
   *
   * @example
   * ```typescript
   * // When the application first loads, the logger will output:
   * // [INIT][App] Application mounted and ready
   * ```
   */
  useEffect(() => {
    logger.init('Application mounted and ready');
  }, []);

  // Removed expensive application state logging to prevent performance issues during typing
  // State changes are logged by individual components when necessary

  /**
   * @function handleMouseDown
   * @description Handles the mouse down event on the resize handle to initiate panel resizing.
   * It sets up mouse move and mouse up listeners to track the resize operation,
   * dynamically adjusting the width of the editor and renderer panels.
   *
   * @param {React.MouseEvent} e - The mouse event object.
   *
   * @architectural_decision
   * The resizing logic is implemented directly within the App component to keep it self-contained
   * and avoid over-engineering for a relatively simple UI interaction.
   *
   * @limitations
   * - The resizing is limited to a minimum of 20% and a maximum of 80% of the window width to prevent
   *   panels from becoming too small or too large.
   * - The resizing is based on `window.innerWidth`, which means it's responsive to the browser window size.
   *
   * @edge_cases
   * - **Fast dragging**: Rapid mouse movements might occasionally lead to slight visual glitches,
   *   though the `requestAnimationFrame` or debouncing could be used for smoother updates if needed.
   * - **Accessibility**: Keyboard navigation for resizing is also implemented via ArrowLeft/ArrowRight keys.
   *
   * @example
   * ```tsx
   * // In the JSX:
   * <button
   *   onMouseDown={handleMouseDown}
   *   // ... other props
   * />
   * ```
   *
   * @diagram
   * ```mermaid
   * graph TD
   *    A[User clicks resize handle] --> B{handleMouseDown};
   *    B --> C{setIsResizing(true)};
   *    B --> D[Add mousemove and mouseup listeners];
   *    D -- mousemove --> E{handleMouseMove};
   *    E --> F{Calculate new editorWidth};
   *    F --> G{setEditorWidth(newWidth)};
   *    D -- mouseup --> H{handleMouseUp};
   *    H --> I{setIsResizing(false)};
   *    H --> J[Remove mousemove and mouseup listeners];
   * ```
   */
  const handleMouseDown = (e: React.MouseEvent) => {
    e.preventDefault();
    setIsResizing(true);

    const handleMouseMove = (e: MouseEvent) => {
      const containerWidth = window.innerWidth;
      const newWidth = Math.max(20, Math.min(80, (e.clientX / containerWidth) * 100));
      setEditorWidth(newWidth);
    };

    const handleMouseUp = () => {
      setIsResizing(false);
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
    };

    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);
  };

  return (
    <div className="app-container h-screen w-screen bg-gray-900 text-white overflow-hidden">
      {/* Application Header */}
      <header className="app-header bg-gray-800 border-b border-gray-700 px-6 py-3 flex justify-between items-center">
        <div className="flex items-center space-x-4">
          <h1 className="text-xl font-semibold text-white">OpenSCAD 3D Visualizer</h1>
          <div className="flex items-center space-x-2 text-sm text-gray-400">
            <span
              className={`w-2 h-2 rounded-full ${
                applicationStatus ? 'bg-yellow-400' : 'bg-green-400'
              }`}
            />
            <span className="capitalize">{applicationStatus ? 'rendering' : 'idle'}</span>
          </div>
        </div>

        <div className="flex items-center space-x-4 text-sm text-gray-400">
          <span>AST: {ast?.length ?? 0} nodes</span>
          <span>Meshes: {renderingStateMeshes.length}</span>
        </div>
      </header>

      {/* Main Content Area */}
      <main className="app-main flex h-[calc(100vh-64px)]">
        {/* Editor Panel */}
        <div
          className="editor-panel bg-gray-900 border-r border-gray-700 flex flex-col"
          style={{ width: `${editorWidth}%` }}
        >
          <div className="panel-header bg-gray-800 px-4 py-2 border-b border-gray-700">
            <h2 className="text-sm font-medium text-gray-300">OpenSCAD Code Editor</h2>
          </div>
          <div className="panel-content flex-1">
            <StoreConnectedEditor className="h-full" data-testid="main-editor" />
          </div>
        </div>

        {/* Resize Handle */}
        <button
          type="button"
          aria-label="Resize panels"
          className={`resize-handle w-1 bg-gray-700 hover:bg-blue-500 cursor-col-resize transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 ${
            isResizing ? 'bg-blue-500' : ''
          }`}
          onMouseDown={handleMouseDown}
          onKeyDown={(e) => {
            if (e.key === 'ArrowLeft') {
              setEditorWidth(Math.max(20, editorWidth - 5));
            } else if (e.key === 'ArrowRight') {
              setEditorWidth(Math.min(80, editorWidth + 5));
            }
          }}
          data-testid="resize-handle"
        />

        {/* 3D Renderer Panel */}
        <div
          className="renderer-panel bg-gray-900 flex flex-col"
          style={{ width: `${100 - editorWidth}%` }}
        >
          <div className="panel-header bg-gray-800 px-4 py-2 border-b border-gray-700">
            <h2 className="text-sm font-medium text-gray-300">3D Visualization</h2>
          </div>
          <div className="panel-content flex-1 relative">
            <ErrorBoundary
              componentName="StoreConnectedRenderer"
              onError={(error, errorInfo) => {
                logger.error('[ERROR][App] StoreConnectedRenderer crashed:', {
                  error: error.message,
                  stack: error.stack,
                  componentStack: errorInfo.componentStack,
                });
              }}
            >
              <StoreConnectedRenderer
                className="h-full w-full"
                enableWebGPU={true}
                enableInspector={false}
                onRenderComplete={(meshCount) => {
                  logger.debug(`[DEBUG][App] Render completed with ${meshCount} meshes`);
                }}
                onRenderError={(error) => {
                  logger.error(`[ERROR][App] Render error: ${error.message}`);
                }}
                data-testid="main-renderer"
              />
            </ErrorBoundary>

            {/* Axis Overlay Controls - Floating Panel */}
            <div className="absolute top-4 right-4 z-10 w-80">
              <AxisOverlayControls />
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}

export default App;
